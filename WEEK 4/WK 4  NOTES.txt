WEEK 4 NOTES - MEMORY

HEXADECIMAL

- Hexadecimal is a system of counting that has 16 counting values:
0 1 2 3 4 5 6 7 8 9 a b c d e f g
- Hexadecimal is also known as base-16
- when counting in hexidecimal, each column is a power of 16
- the number 0 is represented as 00
- the number 1 is represented as 01
- the number 9 is represented as 09
- the number 10 is represented as 0A
- the number 15 is represented as 0F
- the number 16 is represented as 10
- the number 255 is represented as FF, because 16 x 15 (or F) is 240, add 15 more to make 255
- this is the highest number you can count using a two-digit hexideimal system
-hexidecimal is useful because it can be represented using fewer digits
- hexidecimal allows us to represent information more succintly

ADDRESSES

- in weeks past, you may recall our artist rendering of concurrent blocks of memory
- applying hexadecimal numbering to each of these blocks of memory
- create a program with the following:
#include <stdio.h>

int main(void)
{
    int n = 50;
    printf("%i\n", n);
}

- notice how n is stored in memory with the value 50
- the C language has teo powerful operators that relate to memory:
& provides the address of something stored in memory
* instructs the compiler to go to a location in memory
- we can leverage this:

#include <stdio.h>

int main(void)
{
    int n = 50;
    printf("%p\n", &n);
}

- notice thta %p, which allows us to view the address of a location in memory
- &n can be literally translated as "the address of n"
- executing this code will return the address of memory beginning with 0x

POINTERS

- a pointer is a variable that contains the address of some value
- most succintly, a pointer is an address in the computer's memory
- consider the following code:
int n = 50;
int *p = &n;

- ntoice that p is a pointer that contains a number that is the address of an integer notice
- modify code as follows:

#include <stdio.h>

int main(void)
{
    int n = 50;
    int *p = &n;
    printf("%p\n", p);
}

- notice that this code has the same effect as our previous code
- we have simply leveraged our new knowledge of the & and * operators
- a pointer is usually stored as an 8-byte value
- to illustrate the use of the * operator, consider the following:

#include <stdio.h>

int main(void)
{
    int n = 50;
    int *p = &n;
    printf("%i\n", *p);
}

- notice that the printf line prints the integer at the location of p

STRINGS

- now that we have a mental model for pointers, we can peel back a level of simplifications that was offered earlier in this course
- recall that a string is simply an array of characters
string s = "HI!"

- however, what is s really?
- where is s stored in memory?
- as you can imagine s needs to be stored somewhere
- notice how the pointer called s tells the compiler where the first vyte of the string exists in memory
- modify the code as follows:

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    string s = "HI!";
    printf("%p\n", s);
    printf("%p\n", &s[0]);
    printf("%p\n", &s[1]);
    printf("%p\n", &s[2]);
    printf("%p\n", &s[3]);
}

- notice thte above prints the memory location of each characters in the string s
- likewise, you can modify the code as follows:

#include <stdio.h>

int main(void)
{
    char *s = "HI!";
    printf("%s\n", s);
}

- notice that this code will present the string that starts at the location of s

POINTER ARITHMETIC

- you can modify your code to accomplish the same thing in a longer form as follows:

#include <stdio.h>

int main(void)
{
    char *s = "HI!";
    printf("%c\n", s[0]);
    printf("%c\n", s[1]);
    printf("%c\n", s[2]);
}

- notice that we are printing each character at the location of s

- further, you can modify the code:

#include <stdio.h>

int main(void)
{
    char *s = "HI!";
    printf("%c\n", *s);
    printf("%c\n", *(s + 1));
    printf("%c\n", *(s + 2));
}

- notice that the first character at the location of s is printed
- then the character at the location s + 1 is printed, and so on
- can you imagine what would happen if you attempted to access something at location s + 50?
- hackers sometimes attempt to gain access to items in memort they should not have access to
- if you attempt this, the program will likely quit as a safety precaution

COMPARING STRINGS

- a string of characters in simply an array of characters identified by its first byte
- recall last week we proposed that we could not compare to strings using the == operator
- utlizing the == operator in an attempt to compare strings will attempt to compare the memory locations of the strings instead of the characters therein
- accordingly, we would use strcmp
- to illustrate this, write this code:

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Get two strings
    char *s = get_string("s: ");
    char *t = get_string("t: ");

    // Compare strings' addresses
    if (s == t)
    {
        printf("Same\n");
    }
    else
    {
        printf("Different\n");
    }
}

- notice that typing HI! for both strings still result in the output of Different
- modify your code as follows:

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Get two strings
    char *s = get_string("s: ");
    char *t = get_string("t: ");

    // Print strings
    printf("%s\n", s);
    printf("%s\n", t);
}

- notice how we now have two separate strings stored likely at two separate locations
- you can see the locations of these two stored strings with a small modification:

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Get two strings
    char *s = get_string("s: ");
    char *t = get_string("t: ");

    // Print strings' addresses
    printf("%p\n", s);
    printf("%p\n", t);
}

- notice that the %s has been changed to %p in the print statement

COPYING

- a common need in programming is to copy one string to another
- write code as follows:

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    // Get a string
    string s = get_string("s: ");

    // Copy string's address
    string t = s;

    // Capitalize first letter in string
    t[0] = toupper(t[0]);

    // Print string twice
    printf("s: %s\n", s);
    printf("t: %s\n", t);
}

- notice that string t = s copies the addresses of s to t
- this does not accomplish what we are desiring, the string is not copied, only the address is
- before we address this challenges, it's important to ensure that we don't experience a segmentation fault throught the code
- where we attempt to copy string s to string t, where string t does not exist
- we can employ the strlen function as follows:

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    // Get a string
    string s = get_string("s: ");

    // Copy string's address
    string t = s;

    // Capitalize first letter in string
    if (strlen(t) > 0)
    {
        t[0] = toupper(t[0]);
    }

    // Print string twice
    printf("s: %s\n", s);
    printf("t: %s\n", t);
}

- ntoice that strlen is used to make sure string t exists
- if it does not, nothing will be copied
- notice that s and t are still pointing at the same blocks of memory
- this is not an authentic copy of a string
- instead, these are two pointers pointing at the same string
- to be able to make an authentic copy of the string, we will need to introduce two new building blocks
- first malloc allows you to allocate a block of a specific size of memory
- second, free allows you to tell the compiler to free up that block of memory you previously allocated
- we can modify our code to create an authentic copy of our string as follows:

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void)
{
    // Get a string
    char *s = get_string("s: ");

    // Allocate memory for another string
    char *t = malloc(strlen(s) + 1);

    // Copy string into memory, including '\0'
    for (int i = 0; i <= strlen(s); i++)
    {
        t[i] = s[i];
    }

    // Capitalize copy
    t[0] = toupper(t[0]);

    // Print strings
    printf("s: %s\n", s);
    printf("t: %s\n", t);
}

- notice that mallos(strlen(s) + 1) creates a block of memory that is the length of the string s + 1
- this allows for the inclusion of the null \0 character in our final, copied string
- then, the for loop walks through the string s and assigns each value to the same location on the string t

- it turns out that there is an inefficiency in our code, modify as follows:

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void)
{
    // Get a string
    char *s = get_string("s: ");

    // Allocate memory for another string
    char *t = malloc(strlen(s) + 1);

    // Copy string into memory, including '\0'
    for (int i = 0, n = strlen(s); i <= n; i++)
    {
        t[i] = s[i];
    }

    // Capitalize copy
    t[0] = toupper(t[0]);

    // Print strings
    printf("s: %s\n", s);
    printf("t: %s\n", t);
}

- it turns out that there is an inefficiency in our code, modify as follows:

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void)
{
    // Get a string
    char *s = get_string("s: ");

    // Allocate memory for another string
    char *t = malloc(strlen(s) + 1);

    // Copy string into memory, including '\0'
    for (int i = 0, n = strlen(s); i <= n; i++)
    {
        t[i] = s[i];
    }

    // Capitalize copy
    t[0] = toupper(t[0]);

    // Print strings
    printf("s: %s\n", s);
    printf("t: %s\n", t);
}

- notice that n = strlen(s) is defined now in the left-hand side of the for loop
- it's best not to call unneeded functions in the middle condition for the for loop as it will run over and over again
- when moving n = strlen(s) to the left-hand side, the function strlen only runs once

- the C language has a built-in function to copy strings called strcpy, it can be implemented as follows:

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void)
{
    // Get a string
    char *s = get_string("s: ");

    // Allocate memory for another string
    char *t = malloc(strlen(s) + 1);

    // Copy string into memory
    strcpy(t, s);

    // Capitalize copy
    t[0] = toupper(t[0]);

    // Print strings
    printf("s: %s\n", s);
    printf("t: %s\n", t);
}

- notice that strcpy does the same work that our for loop previously did
- both get_string and malloc return NULL, a special value in memory, in the event that something goes wrong
- you can write code that can check for this NULL condition:

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void)
{
    // Get a string
    char *s = get_string("s: ");
    if (s == NULL)
    {
        return 1;
    }

    // Allocate memory for another string
    char *t = malloc(strlen(s) + 1);
    if (t == NULL)
    {
        return 1;
    }

    // Copy string into memory
    strcpy(t, s);

    // Capitalize copy
    if (strlen(t) > 0)
    {
        t[0] = toupper(t[0]);
    }

    // Print strings
    printf("s: %s\n", s);
    printf("t: %s\n", t);

    // Free memory
    free(t);
    return 0;
}

- notice that if the string is of length 0 or malloc fails, NULL is returned
- further, notice that free lets the computer know that you are done with this block of memory you created via malloc

VALGRIND

- valgrind is a tool that can check to see if there are memory-related issues with your programs wherein you utilized malloc
- specifically it checks to see if you free all the memory you allocated
- consider the following code:

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
    int *x = malloc(3 * sizeof(int));
    x[0] = 72;
    x[1] = 73;
    x[2] = 33;
}

- notice that running this program does not cause any errors
- while malloc is used to allocate enough memory for an array, the code fails to free that allocated memory
- if you compile the file followed by valgrind ./memory you will get a report from valgrind that will report where memory has been lost as a result of your program
- you can modidy code as follows:

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
    int *x = malloc(3 * sizeof(int));
    x[0] = 72;
    x[1] = 73;
    x[2] = 33;
    free(x);
}

- notice that running valgrind again now results in memory leaks

GARBAGE VALUES

- when you ask the compiler for a block of memory, there is no guarantee that this memory will be empty
- it's very possible that this memory that you allocated was previously utilized by the computer
- accordingly, you may see junk or garbage values
- this is a result of you getting a block of memory but not initializing it
- for example:

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
    int scores[1024];
    for (int i = 0; i < 1024; i++)
    {
        printf("%i\n", scores[i]);
    }
}

- notice that running this code will allocate 1024 locations in memory for your array, but the for loop will likely show that not all values therein are 0
- it's always best practice to be aware of potential for garbage values when you do not initialize blocks of memory to some other value like zero or otherwise

SWAP

- in the real world, a common need in programming is to swap two values
- naturally, it's hard to swap two variables without a temporary holding space
- in practice, you can type swap.c and write code as follows:

#include <stdio.h>

void swap(int a, int b);

int main(void)
{
    int x = 1;
    int y = 2;

    printf("x is %i, y is %i\n", x, y);
    swap(x, y);
    printf("x is %i, y is %i\n", x, y);
}

void swap(int a, int b)
{
    int tmp = a;
    a = b;
    b = tmp;
}

- notice that while this code runs, it does not work
- the values, even after being sent to the swap function do not swap -why?
- when you pass values to a function, you are only providing copies
- in previous weeks, we discussed the concept of scope
- the values of x and y created in the curly {} braces of the main function only have scope of the main function
- the global variables, which have not been used in this course, live in one place in memory
- various functions are stored in the stack in another area of memory

- notice that main and swap have two separate frames or areas of memory
-therefore we cannot simply pass the values from one function to another to change them
- modify your code as follows:

#include <stdio.h>

void swap(int *a, int *b);

int main(void)
{
    int x = 1;
    int y = 2;

    printf("x is %i, y is %i\n", x, y);
    swap(&x, &y);
    printf("x is %i, y is %i\n", x, y);
}

void swap(int *a, int *b)
{
    int tmp = *a;
    *a = *b;
    *b = tmp;
}

- notice that the variables are not passed by value but by reference
- that is, the address of a and b are provided to the function
- therefore, the swap function can know where to make changes to the actual a and b from the main function

OVERFLOW

- a heap overflow is when you overflow the heap, touching areas of memory you are not supposed to
- a stack overflow is when too many functions are called, overflowing the amount of memory available
- both of these are considered buffer overflows

scanf

- in CS50, we have created functions like get_int to simplify the act of getting input from the user
- scanf is a built-in function that can get user input
- we can reimplement get_int rather easily using scanf as follows:

#include <stdio.h>

int main(void)
{
    int x;
    printf("x: ");
    scanf("%i", &x);
    printf("x: %i\n", x);
}

- notice that the value of x is stored at the location of x in the line scanf("%i", &x)
- however, attempting to reimplement get_string is not easy, consider the following:

#include <stdio.h>

int main(void)
{
    char *s;
    printf("s: ");
    scanf("%s", s);
    printf("s: %s\n", s);
}

- notice that no & is required because strings are special
- still, this program will not function
- nowhere in this program do we allocate the amount of memory required for our string
- we can modify our code as follows:

#include <stdio.h>

int main(void)
{
    char s[4];
    printf("s: ");
    scanf("%s", s);
    printf("s: %s\n", s);
}

- notice that if we pre-allocate an array of size 4, we can type cat and the program functions
- however, a string larger than this would create an error

FILES

- you can read from and manipulate FILES
- while thi topic will be discussed further in a future week, consider the following code for phonebook.c:

#include <cs50.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    // Open CSV file
    FILE *file = fopen("phonebook.csv", "a");

    // Get name and number
    char *name = get_string("Name: ");
    char *number = get_string("Number: ");

    // Print to file
    fprintf(file, "%s,%s\n", name, number);

    // Close file
    fclose(file);
}

- notice that this code uses pointers to access the file
- you can create a file called phonebook.csv in advance of running the above code
- after running the above program and inputting a name and phone number, you will notice that this data persists in your CSV file

SUMMING UP

- In this lesson, you learned about pointers that provide you with the ability to access and manipulate data at specific memory locations. Specifically, we delved into…

- Memory
- Hexadecimal
- Addresses
- Pointers
- Strings
- Pointer Arithmetic
- Comparing strings
- Copying
- Valgrind
- Garbage values
- Swap
- Overflow
- scanf
