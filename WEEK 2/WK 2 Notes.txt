WEEK 2 NOTES

COMPILING

- encryption is the act of hiding plain text from prying eyes. decrypting, then, is the act of taking an ecrypted piece of text and returning it to a human-readable form
- an encrypted piece of text may look like the following:
U I J T X B T D T 5 0
- Recall that last week you learned about a compiler, a specialized computer program that converts source code into machine code that can be understood by a computer.
- For example, you might have a computer program that looks like this:

#include <stdio.h>

int main(void)
{
    printf("hello, world\n");
}

- a compiler will take the above code and turn it into machine code
- VS Code, the programming environment, utilizes a compiler called cland or c language
- if you were to type make hello, it runs a command that executes clang to create an output file that you can run as a user
- VS Code has been pre-programmed such that make will run numerous command line arguments along with clang for your convenience as a user
- consider the following code:

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    string name = get_string("What's your name? ");
    printf("hello, %s\n", name);
}

- You can attempt to enter into the terminal window: clang -o hello hello.c.
- You will be met by an error that indicates that clang does not know where to find the cs50.h library.
- Attempting again to compile this code, run the following command in the terminal window: clang -o hello hello.c -lcs50.
- This will enable the compiler to access the cs50.h library.
- Running in the terminal window ./hello, your program will run as intended.
- While the above is offered as an illustration, such that you can understand more deeply the process and concept of compiling code, using make in CS50 is perfectly fine and the expectation

- compiling involves major steps:
  - First, preprocessing is where the header files in your code, designated by a # (such as #include \<cs50.h\>) are effectively copied and pasted into your file. During this step, the code from cs50.h is copied into your program. Similarly, just as your code contains #include \<stdio.h\>, code contained within stdio.h somewhere on your computer is copied to your program. This step can be visualized as follows:
...
string get_string(string prompt);
int printf(string format, ...);
...

int main(void)
{
    string name = get_string("What's your name? ");
    printf("hello, %s\n", name);
}

  - second, compiling is where your program is converted into assembly code
  - third, assembling involves the compiler converting your assembly code into machine code
  - finally, during the linking step, code from your included libraries are converted also into machine code and combined with your code
  - the final executable file is then outputted

DEBUGGING

- consider the following code that has a bug purposely inserted within it:
#include <stdio.h>

int main(void)
{
    for (int i = 0; i <= 3; i++)
    {
        printf("#\n");
    }
}

- running this code, four bricks appear instead of the intended three
- printf is a very useful way of debugging your code
- you can modify your code as follows:
#include <stdio.h>

int main(void)
{
    for (int i = 0; i <= 3; i++)
    {
        printf("i is %i\n", i);
        printf("#\n");
    }
}

- running this code, you will see the numerous statements, including i is 0, i is 1, i is 2, and i is 3
- seeing this, you might realize that further code needs to be corrected as follows:
#include <stdio.h>

int main(void)
{
    for (int i = 0; i < 3; i++)
    {
        printf("#\n");
    }
}

- notice the <= has been replaced with <

- a second tool in debugging is called a debugger, a software tool created by programmers to help track down bugs in code
- in VS code, a preconfigured debugger has been provided to you
- to utilize this debugger, first set a breakpoint by clicking to the left of a line ofyour code, just to the left of the line number
- when you click there, you will see a red dot appearing
- this is like a stop sign, asking the compiler to pause such that you can consider what's happening in this part of your code
- Second, run debug50 ./buggy0. You will notice that after the debugger comes to life that a line of your code will illuminate in a gold-like color. Quite literally, the code has paused at this line of code. Notice in the top left corner how all local variables are being displayed, including i, which has a current value of 0. At the top of your window, you can click the step over button and it will keep moving through your code. Notice how the value of i increases.
- While this tool will not show you where your bug is, it will help you slow down and see how your code is running step by step.
- To illustrate a third means of debugging, please start a new file by running code buggy1.c in your terminal window. Write your code as follows:
#include <cs50.h>
#include <stdio.h>

int get_negative_int(void);

int main(void)
{
    int i = get_negative_int();
    printf("%i\n", i);
}

// Prompt user for positive integer
int get_negative_int(void)
{
    int n;
    do
    {
        n = get_int("Negative Integer: ");
    }
    while (n < 0);
    return n;
}

- notice get_negative_int is designed to get a negative integer from the user
- Running make buggy1, youâ€™ll notice that it does not do as intended. It accepts positive integers and seems to ignore negative ones.
- As before, set a breakpoint at a line of your code. Best to set a breakpoint at int i = get_negative_int. Now, run debug50 buggy1.
- Unlike before, where you utilized the step over button at the top of the window, use the step into button. This will take the debugger into your get_negative_int function. Notice how doing this will show you that you are, indeed, stuck in the do while loop.
- With this knowledge, you might consider why you are stuck in this loop, leading you to edit your code as follows:
#include <cs50.h>
#include <stdio.h>

int get_negative_int(void);

int main(void)
{
    int i = get_negative_int();
    printf("%i\n", i);
}

// Prompt user for positive integer
int get_negative_int(void)
{
    int n;
    do
    {
        n = get_int("Negative Integer: ");
    }
    while (n >= 0);
    return n;
}

- notice n <0 has been changed
- a final form of debugging is called rubber duck debugging
- when you are having challenges with your code, consider how speaking out loud to, quite literally, a rubber duck about the problem
- if you'd rather not talk to a small plastic duckm you are welcome to speak to a human
- they need not understand how to program - speaking with them is an opportunity for you to speak about your code

ARRAYS
- arrays are a way of storing data back-to-back in memory such that this data is easily accessible
- int scores[3] is a way of telling the compiler to provide you three back-to-back places in memory of size int to store three scores
- write code as follows:
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Scores
    int scores[3];
    scores[0] = 72;
    scores[1] = 73;
    scores[2] = 33;

    // Print average
    printf("Average: %f\n", (scores[0] + scores[1] + scores[2]) / 3.0);
}

- notice that score[0] examines the value at this location of memory by indexing into the array called scores at location 0 to see what value is stored there
- you can see how while the code above works, there is still an opportunity to improve the code:
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Get scores
    int scores[3];
    for (int i = 0; i < 3; i++)
    {
        scores[i] = get_int("Score: ");
    }

    // Print average
    printf("Average: %f\n", (scores[0] + scores[1] + scores[2]) / 3.0);
}

- notice how we index into scores by using the scores[i] where i is supplied by the for loop
- we can simplify or abstract away the calculation of the average:
#include <cs50.h>
#include <stdio.h>

// Constant
const int N = 3;

// Prototype
float average(int length, int array[]);

int main(void)
{
    // Get scores
    int scores[N];
    for (int i = 0; i < N; i++)
    {
        scores[i] = get_int("Score: ");
    }

    // Print average
    printf("Average: %f\n", average(N, scores));
}

float average(int length, int array[])
{
    // Calculate average
    int sum = 0;
    for (int i = 0; i < length; i++)
    {
        sum += array[i];
    }
    return sum / (float) length;
}

- notice that a new function called average is declared
- notice that a const or constant value of N is declared
- most importantly, notice how the average function takes int array[], which means that the compiler passes an array to this function
- not only can arrays be containers, they can be passed between functions

STRINGS

- a string is simply an array of variables of type char: an array of characters
- implementing this in your own code, type code hi.c in the terminal window and write code as follows:

#include <stdio.h>

int main(void)
{
    char c1 = 'H';
    char c2 = 'I';
    char c3 = '!';

    printf("%i %i %i\n", c1, c2, c3);
}

- notice that this will output the decimal values of each character
- to further understand how a string works, revise your code as follows:

#include <cs50.h>
#include <stdio.h>

int main(void)
{
    string s = "HI!";
    printf("%i %i %i\n", s[0], s[1], s[2]);
}

- notice how the printf statement presents three values from our array called s
- let's imagine we want to say both HI! and BYE! :
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    string s = "HI!";
    string t = "BYE!";

    printf("%s\n", s);
    printf("%s\n", t);
}

- notice that two strings are declared and used in this example
- we can further improve this code:
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    string words[2];

    words[0] = "HI!";
    words[1] = "BYE!";

    printf("%s\n", words[0]);
    printf("%s\n", words[1]);
}

- notice that both strings are stored within a single array of type string
- a common problem with programming, and perhaps C more specifically, is to discover the length of the array
- how could we implement this in code?
- make the following file length.c :
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Prompt for user's name
    string name = get_string("Name: ");

    // Count number of characters up until '\0' (aka NUL)
    int n = 0;
    while (name[n] != '\0')
    {
        n++;
    }
    printf("%i\n", n);
}

- notice that this code loops until the NUL character is found
- since this is such a common problem within programming, other programmers have created code in the string.h library to find the length of a string
- you can find the length of a string by modifying your code:

#include <cs50.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    // Prompt for user's name
    string name = get_string("Name: ");
    int length = strlen(name);
    printf("%i\n", length);
}

- notice that this code uses the string.h library, declared at the top of the file
- further, it uses a function from that library called strlen which calculates the length of the string passed to it

- ctype.h is another library that is quite useful
- imagine we want to create a program that converted all lowercase characters to uppercase ones
- make a file uppercase.c :

#include <cs50.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    string s = get_string("Before: ");
    printf("After:  ");
    for (int i = 0, n = strlen(s); i < n; i++)
    {
        if (s[i] >= 'a' && s[i] <= 'z')
        {
            printf("%c", s[i] - 32);
        }
        else
        {
            printf("%c", s[i]);
        }
    }
    printf("\n");
}

- notice that this code iterates through each value in the string
- the program looks at each character
- if the character is lowercase, it substract the value 32 from it to convert it to uppercase
- when a lowercase character has 32 subtracted from it, it results in an uppercase version of that same character
- while the program does what we want, there is an easier way using the ctype.h library :
#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    string s = get_string("Before: ");
    printf("After:  ");
    for (int i = 0, n = strlen(s); i < n; i++)
    {
        if (islower(s[i]))
        {
            printf("%c", toupper(s[i]));
        }
        else
        {
            printf("%c", s[i]);
        }
    }
    printf("\n");
}

- notice that the program uses islower to detect if each character is uppercase or lowercase
- then the toupper function is passed s[i]
- each character, if lowercase, is converted to uppercase

- while this program does what is desired, there is an opportunity for improvement
- toupper is smart enough to know that if it is passed what is already an uppercase letter, it will simply ignore it
- therefore, we no longer need our if statement
- you can simplify the code as follows:

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
    string s = get_string("Before: ");
    printf("After:  ");
    for (int i = 0, n = strlen(s); i < n; i++)
    {
        printf("%c", toupper(s[i]));
    }
    printf("\n");
}

- notice that this code is quite simplified, removing the unnecessary if statement
